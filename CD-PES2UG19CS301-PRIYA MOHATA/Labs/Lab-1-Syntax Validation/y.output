Terminals which are not used

   T_DO
   T_STRLITERAL


State 66 conflicts: 8 shift/reduce
State 67 conflicts: 8 shift/reduce
State 73 conflicts: 8 shift/reduce
State 84 conflicts: 8 shift/reduce


Grammar

    0 $accept: START $end

    1 START: PROG

    2 PROG: T_INCLUDE '<' T_HEADER '>' PROG
    3     | MAIN PROG
    4     | DECLR ';' PROG
    5     | ASSGN ';' PROG
    6     | /* empty */

    7 DECLR: TYPE LISTVAR

    8 LISTVAR: LISTVAR ',' T_ID
    9        | T_ID

   10 TYPE: T_INT
   11     | T_FLOAT
   12     | T_DOUBLE
   13     | T_CHAR

   14 ASSGN: T_ID '=' EXPR

   15 EXPR: EXPR REL_OP E
   16     | E

   17 REL_OP: T_LESSEREQ
   18       | T_GREATEREQ
   19       | '<'
   20       | '>'
   21       | T_EQCOMP
   22       | T_NOTEQUAL

   23 E: E '+' T
   24  | E '-' T
   25  | T

   26 T: T '*' F
   27  | T '/' F
   28  | F

   29 F: '(' EXPR ')'
   30  | T_ID
   31  | T_NUM

   32 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' '{' STMT '}'

   33 EMPTY_LISTVAR: LISTVAR
   34              | /* empty */

   35 STMT: STMT_NO_BLOCK STMT
   36     | BLOCK STMT
   37     | /* empty */

   38 STMT_NO_BLOCK: DECLR ';'
   39              | ASSGN ';'
   40              | T_IF COND STMT
   41              | T_IF COND STMT T_ELSE STMT
   42              | WHILE

   43 BLOCK: '{' STMT '}'

   44 WHILE: T_WHILE '(' COND ')' WHILE_2

   45 COND: EXPR
   46     | ASSGN

   47 WHILE_2: '{' STMT '}'
   48        | ';'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 29 32 44
')' (41) 29 32 44
'*' (42) 26
'+' (43) 23
',' (44) 8
'-' (45) 24
'/' (47) 27
';' (59) 4 5 38 39 48
'<' (60) 2 19
'=' (61) 14
'>' (62) 2 20
'{' (123) 32 43 47
'}' (125) 32 43 47
error (256)
T_INT (258) 10
T_DOUBLE (259) 12
T_FLOAT (260) 11
T_CHAR (261) 13
T_WHILE (262) 44
T_DO (263)
T_STRLITERAL (264)
T_IF (265) 40 41
T_ELSE (266) 41
T_INCLUDE (267) 2
T_MAIN (268) 32
T_EQCOMP (269) 21
T_NOTEQUAL (270) 22
T_GREATEREQ (271) 18
T_LESSEREQ (272) 17
T_NUM (273) 31
T_HEADER (274) 2
T_ID (275) 8 9 14 30
T_IFX (276)


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
START (36)
    on left: 1, on right: 0
PROG (37)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
DECLR (38)
    on left: 7, on right: 4 38
LISTVAR (39)
    on left: 8 9, on right: 7 8 33
TYPE (40)
    on left: 10 11 12 13, on right: 7 32
ASSGN (41)
    on left: 14, on right: 5 39 46
EXPR (42)
    on left: 15 16, on right: 14 15 29 45
REL_OP (43)
    on left: 17 18 19 20 21 22, on right: 15
E (44)
    on left: 23 24 25, on right: 15 16 23 24
T (45)
    on left: 26 27 28, on right: 23 24 25 26 27
F (46)
    on left: 29 30 31, on right: 26 27 28
MAIN (47)
    on left: 32, on right: 3
EMPTY_LISTVAR (48)
    on left: 33 34, on right: 32
STMT (49)
    on left: 35 36 37, on right: 32 35 36 40 41 43 47
STMT_NO_BLOCK (50)
    on left: 38 39 40 41 42, on right: 35
BLOCK (51)
    on left: 43, on right: 36
WHILE (52)
    on left: 44, on right: 42
COND (53)
    on left: 45 46, on right: 40 41 44
WHILE_2 (54)
    on left: 47 48, on right: 44


state 0

    0 $accept: . START $end

    T_INT      shift, and go to state 1
    T_DOUBLE   shift, and go to state 2
    T_FLOAT    shift, and go to state 3
    T_CHAR     shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6

    $default  reduce using rule 6 (PROG)

    START  go to state 7
    PROG   go to state 8
    DECLR  go to state 9
    TYPE   go to state 10
    ASSGN  go to state 11
    MAIN   go to state 12


state 1

   10 TYPE: T_INT .

    $default  reduce using rule 10 (TYPE)


state 2

   12 TYPE: T_DOUBLE .

    $default  reduce using rule 12 (TYPE)


state 3

   11 TYPE: T_FLOAT .

    $default  reduce using rule 11 (TYPE)


state 4

   13 TYPE: T_CHAR .

    $default  reduce using rule 13 (TYPE)


state 5

    2 PROG: T_INCLUDE . '<' T_HEADER '>' PROG

    '<'  shift, and go to state 13


state 6

   14 ASSGN: T_ID . '=' EXPR

    '='  shift, and go to state 14


state 7

    0 $accept: START . $end

    $end  shift, and go to state 15


state 8

    1 START: PROG .

    $default  reduce using rule 1 (START)


state 9

    4 PROG: DECLR . ';' PROG

    ';'  shift, and go to state 16


state 10

    7 DECLR: TYPE . LISTVAR
   32 MAIN: TYPE . T_MAIN '(' EMPTY_LISTVAR ')' '{' STMT '}'

    T_MAIN  shift, and go to state 17
    T_ID    shift, and go to state 18

    LISTVAR  go to state 19


state 11

    5 PROG: ASSGN . ';' PROG

    ';'  shift, and go to state 20


state 12

    3 PROG: MAIN . PROG

    T_INT      shift, and go to state 1
    T_DOUBLE   shift, and go to state 2
    T_FLOAT    shift, and go to state 3
    T_CHAR     shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6

    $default  reduce using rule 6 (PROG)

    PROG   go to state 21
    DECLR  go to state 9
    TYPE   go to state 10
    ASSGN  go to state 11
    MAIN   go to state 12


state 13

    2 PROG: T_INCLUDE '<' . T_HEADER '>' PROG

    T_HEADER  shift, and go to state 22


state 14

   14 ASSGN: T_ID '=' . EXPR

    T_NUM  shift, and go to state 23
    T_ID   shift, and go to state 24
    '('    shift, and go to state 25

    EXPR  go to state 26
    E     go to state 27
    T     go to state 28
    F     go to state 29


state 15

    0 $accept: START $end .

    $default  accept


state 16

    4 PROG: DECLR ';' . PROG

    T_INT      shift, and go to state 1
    T_DOUBLE   shift, and go to state 2
    T_FLOAT    shift, and go to state 3
    T_CHAR     shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6

    $default  reduce using rule 6 (PROG)

    PROG   go to state 30
    DECLR  go to state 9
    TYPE   go to state 10
    ASSGN  go to state 11
    MAIN   go to state 12


state 17

   32 MAIN: TYPE T_MAIN . '(' EMPTY_LISTVAR ')' '{' STMT '}'

    '('  shift, and go to state 31


state 18

    9 LISTVAR: T_ID .

    $default  reduce using rule 9 (LISTVAR)


state 19

    7 DECLR: TYPE LISTVAR .
    8 LISTVAR: LISTVAR . ',' T_ID

    ','  shift, and go to state 32

    $default  reduce using rule 7 (DECLR)


state 20

    5 PROG: ASSGN ';' . PROG

    T_INT      shift, and go to state 1
    T_DOUBLE   shift, and go to state 2
    T_FLOAT    shift, and go to state 3
    T_CHAR     shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6

    $default  reduce using rule 6 (PROG)

    PROG   go to state 33
    DECLR  go to state 9
    TYPE   go to state 10
    ASSGN  go to state 11
    MAIN   go to state 12


state 21

    3 PROG: MAIN PROG .

    $default  reduce using rule 3 (PROG)


state 22

    2 PROG: T_INCLUDE '<' T_HEADER . '>' PROG

    '>'  shift, and go to state 34


state 23

   31 F: T_NUM .

    $default  reduce using rule 31 (F)


state 24

   30 F: T_ID .

    $default  reduce using rule 30 (F)


state 25

   29 F: '(' . EXPR ')'

    T_NUM  shift, and go to state 23
    T_ID   shift, and go to state 24
    '('    shift, and go to state 25

    EXPR  go to state 35
    E     go to state 27
    T     go to state 28
    F     go to state 29


state 26

   14 ASSGN: T_ID '=' EXPR .
   15 EXPR: EXPR . REL_OP E

    T_EQCOMP     shift, and go to state 36
    T_NOTEQUAL   shift, and go to state 37
    T_GREATEREQ  shift, and go to state 38
    T_LESSEREQ   shift, and go to state 39
    '<'          shift, and go to state 40
    '>'          shift, and go to state 41

    $default  reduce using rule 14 (ASSGN)

    REL_OP  go to state 42


state 27

   16 EXPR: E .
   23 E: E . '+' T
   24  | E . '-' T

    '+'  shift, and go to state 43
    '-'  shift, and go to state 44

    $default  reduce using rule 16 (EXPR)


state 28

   25 E: T .
   26 T: T . '*' F
   27  | T . '/' F

    '*'  shift, and go to state 45
    '/'  shift, and go to state 46

    $default  reduce using rule 25 (E)


state 29

   28 T: F .

    $default  reduce using rule 28 (T)


state 30

    4 PROG: DECLR ';' PROG .

    $default  reduce using rule 4 (PROG)


state 31

   32 MAIN: TYPE T_MAIN '(' . EMPTY_LISTVAR ')' '{' STMT '}'

    T_ID  shift, and go to state 18

    $default  reduce using rule 34 (EMPTY_LISTVAR)

    LISTVAR        go to state 47
    EMPTY_LISTVAR  go to state 48


state 32

    8 LISTVAR: LISTVAR ',' . T_ID

    T_ID  shift, and go to state 49


state 33

    5 PROG: ASSGN ';' PROG .

    $default  reduce using rule 5 (PROG)


state 34

    2 PROG: T_INCLUDE '<' T_HEADER '>' . PROG

    T_INT      shift, and go to state 1
    T_DOUBLE   shift, and go to state 2
    T_FLOAT    shift, and go to state 3
    T_CHAR     shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6

    $default  reduce using rule 6 (PROG)

    PROG   go to state 50
    DECLR  go to state 9
    TYPE   go to state 10
    ASSGN  go to state 11
    MAIN   go to state 12


state 35

   15 EXPR: EXPR . REL_OP E
   29 F: '(' EXPR . ')'

    T_EQCOMP     shift, and go to state 36
    T_NOTEQUAL   shift, and go to state 37
    T_GREATEREQ  shift, and go to state 38
    T_LESSEREQ   shift, and go to state 39
    '<'          shift, and go to state 40
    '>'          shift, and go to state 41
    ')'          shift, and go to state 51

    REL_OP  go to state 42


state 36

   21 REL_OP: T_EQCOMP .

    $default  reduce using rule 21 (REL_OP)


state 37

   22 REL_OP: T_NOTEQUAL .

    $default  reduce using rule 22 (REL_OP)


state 38

   18 REL_OP: T_GREATEREQ .

    $default  reduce using rule 18 (REL_OP)


state 39

   17 REL_OP: T_LESSEREQ .

    $default  reduce using rule 17 (REL_OP)


state 40

   19 REL_OP: '<' .

    $default  reduce using rule 19 (REL_OP)


state 41

   20 REL_OP: '>' .

    $default  reduce using rule 20 (REL_OP)


state 42

   15 EXPR: EXPR REL_OP . E

    T_NUM  shift, and go to state 23
    T_ID   shift, and go to state 24
    '('    shift, and go to state 25

    E  go to state 52
    T  go to state 28
    F  go to state 29


state 43

   23 E: E '+' . T

    T_NUM  shift, and go to state 23
    T_ID   shift, and go to state 24
    '('    shift, and go to state 25

    T  go to state 53
    F  go to state 29


state 44

   24 E: E '-' . T

    T_NUM  shift, and go to state 23
    T_ID   shift, and go to state 24
    '('    shift, and go to state 25

    T  go to state 54
    F  go to state 29


state 45

   26 T: T '*' . F

    T_NUM  shift, and go to state 23
    T_ID   shift, and go to state 24
    '('    shift, and go to state 25

    F  go to state 55


state 46

   27 T: T '/' . F

    T_NUM  shift, and go to state 23
    T_ID   shift, and go to state 24
    '('    shift, and go to state 25

    F  go to state 56


state 47

    8 LISTVAR: LISTVAR . ',' T_ID
   33 EMPTY_LISTVAR: LISTVAR .

    ','  shift, and go to state 32

    $default  reduce using rule 33 (EMPTY_LISTVAR)


state 48

   32 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR . ')' '{' STMT '}'

    ')'  shift, and go to state 57


state 49

    8 LISTVAR: LISTVAR ',' T_ID .

    $default  reduce using rule 8 (LISTVAR)


state 50

    2 PROG: T_INCLUDE '<' T_HEADER '>' PROG .

    $default  reduce using rule 2 (PROG)


state 51

   29 F: '(' EXPR ')' .

    $default  reduce using rule 29 (F)


state 52

   15 EXPR: EXPR REL_OP E .
   23 E: E . '+' T
   24  | E . '-' T

    '+'  shift, and go to state 43
    '-'  shift, and go to state 44

    $default  reduce using rule 15 (EXPR)


state 53

   23 E: E '+' T .
   26 T: T . '*' F
   27  | T . '/' F

    '*'  shift, and go to state 45
    '/'  shift, and go to state 46

    $default  reduce using rule 23 (E)


state 54

   24 E: E '-' T .
   26 T: T . '*' F
   27  | T . '/' F

    '*'  shift, and go to state 45
    '/'  shift, and go to state 46

    $default  reduce using rule 24 (E)


state 55

   26 T: T '*' F .

    $default  reduce using rule 26 (T)


state 56

   27 T: T '/' F .

    $default  reduce using rule 27 (T)


state 57

   32 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' . '{' STMT '}'

    '{'  shift, and go to state 58


state 58

   32 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' '{' . STMT '}'

    T_INT     shift, and go to state 1
    T_DOUBLE  shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_CHAR    shift, and go to state 4
    T_WHILE   shift, and go to state 59
    T_IF      shift, and go to state 60
    T_ID      shift, and go to state 6
    '{'       shift, and go to state 61

    $default  reduce using rule 37 (STMT)

    DECLR          go to state 62
    TYPE           go to state 63
    ASSGN          go to state 64
    STMT           go to state 65
    STMT_NO_BLOCK  go to state 66
    BLOCK          go to state 67
    WHILE          go to state 68


state 59

   44 WHILE: T_WHILE . '(' COND ')' WHILE_2

    '('  shift, and go to state 69


state 60

   40 STMT_NO_BLOCK: T_IF . COND STMT
   41              | T_IF . COND STMT T_ELSE STMT

    T_NUM  shift, and go to state 23
    T_ID   shift, and go to state 70
    '('    shift, and go to state 25

    ASSGN  go to state 71
    EXPR   go to state 72
    E      go to state 27
    T      go to state 28
    F      go to state 29
    COND   go to state 73


state 61

   43 BLOCK: '{' . STMT '}'

    T_INT     shift, and go to state 1
    T_DOUBLE  shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_CHAR    shift, and go to state 4
    T_WHILE   shift, and go to state 59
    T_IF      shift, and go to state 60
    T_ID      shift, and go to state 6
    '{'       shift, and go to state 61

    $default  reduce using rule 37 (STMT)

    DECLR          go to state 62
    TYPE           go to state 63
    ASSGN          go to state 64
    STMT           go to state 74
    STMT_NO_BLOCK  go to state 66
    BLOCK          go to state 67
    WHILE          go to state 68


state 62

   38 STMT_NO_BLOCK: DECLR . ';'

    ';'  shift, and go to state 75


state 63

    7 DECLR: TYPE . LISTVAR

    T_ID  shift, and go to state 18

    LISTVAR  go to state 19


state 64

   39 STMT_NO_BLOCK: ASSGN . ';'

    ';'  shift, and go to state 76


state 65

   32 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' '{' STMT . '}'

    '}'  shift, and go to state 77


state 66

   35 STMT: STMT_NO_BLOCK . STMT

    T_INT     shift, and go to state 1
    T_DOUBLE  shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_CHAR    shift, and go to state 4
    T_WHILE   shift, and go to state 59
    T_IF      shift, and go to state 60
    T_ID      shift, and go to state 6
    '{'       shift, and go to state 61

    T_INT     [reduce using rule 37 (STMT)]
    T_DOUBLE  [reduce using rule 37 (STMT)]
    T_FLOAT   [reduce using rule 37 (STMT)]
    T_CHAR    [reduce using rule 37 (STMT)]
    T_WHILE   [reduce using rule 37 (STMT)]
    T_IF      [reduce using rule 37 (STMT)]
    T_ID      [reduce using rule 37 (STMT)]
    '{'       [reduce using rule 37 (STMT)]
    $default  reduce using rule 37 (STMT)

    DECLR          go to state 62
    TYPE           go to state 63
    ASSGN          go to state 64
    STMT           go to state 78
    STMT_NO_BLOCK  go to state 66
    BLOCK          go to state 67
    WHILE          go to state 68


state 67

   36 STMT: BLOCK . STMT

    T_INT     shift, and go to state 1
    T_DOUBLE  shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_CHAR    shift, and go to state 4
    T_WHILE   shift, and go to state 59
    T_IF      shift, and go to state 60
    T_ID      shift, and go to state 6
    '{'       shift, and go to state 61

    T_INT     [reduce using rule 37 (STMT)]
    T_DOUBLE  [reduce using rule 37 (STMT)]
    T_FLOAT   [reduce using rule 37 (STMT)]
    T_CHAR    [reduce using rule 37 (STMT)]
    T_WHILE   [reduce using rule 37 (STMT)]
    T_IF      [reduce using rule 37 (STMT)]
    T_ID      [reduce using rule 37 (STMT)]
    '{'       [reduce using rule 37 (STMT)]
    $default  reduce using rule 37 (STMT)

    DECLR          go to state 62
    TYPE           go to state 63
    ASSGN          go to state 64
    STMT           go to state 79
    STMT_NO_BLOCK  go to state 66
    BLOCK          go to state 67
    WHILE          go to state 68


state 68

   42 STMT_NO_BLOCK: WHILE .

    $default  reduce using rule 42 (STMT_NO_BLOCK)


state 69

   44 WHILE: T_WHILE '(' . COND ')' WHILE_2

    T_NUM  shift, and go to state 23
    T_ID   shift, and go to state 70
    '('    shift, and go to state 25

    ASSGN  go to state 71
    EXPR   go to state 72
    E      go to state 27
    T      go to state 28
    F      go to state 29
    COND   go to state 80


state 70

   14 ASSGN: T_ID . '=' EXPR
   30 F: T_ID .

    '='  shift, and go to state 14

    $default  reduce using rule 30 (F)


state 71

   46 COND: ASSGN .

    $default  reduce using rule 46 (COND)


state 72

   15 EXPR: EXPR . REL_OP E
   45 COND: EXPR .

    T_EQCOMP     shift, and go to state 36
    T_NOTEQUAL   shift, and go to state 37
    T_GREATEREQ  shift, and go to state 38
    T_LESSEREQ   shift, and go to state 39
    '<'          shift, and go to state 40
    '>'          shift, and go to state 41

    $default  reduce using rule 45 (COND)

    REL_OP  go to state 42


state 73

   40 STMT_NO_BLOCK: T_IF COND . STMT
   41              | T_IF COND . STMT T_ELSE STMT

    T_INT     shift, and go to state 1
    T_DOUBLE  shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_CHAR    shift, and go to state 4
    T_WHILE   shift, and go to state 59
    T_IF      shift, and go to state 60
    T_ID      shift, and go to state 6
    '{'       shift, and go to state 61

    T_INT     [reduce using rule 37 (STMT)]
    T_DOUBLE  [reduce using rule 37 (STMT)]
    T_FLOAT   [reduce using rule 37 (STMT)]
    T_CHAR    [reduce using rule 37 (STMT)]
    T_WHILE   [reduce using rule 37 (STMT)]
    T_IF      [reduce using rule 37 (STMT)]
    T_ID      [reduce using rule 37 (STMT)]
    '{'       [reduce using rule 37 (STMT)]
    $default  reduce using rule 37 (STMT)

    DECLR          go to state 62
    TYPE           go to state 63
    ASSGN          go to state 64
    STMT           go to state 81
    STMT_NO_BLOCK  go to state 66
    BLOCK          go to state 67
    WHILE          go to state 68


state 74

   43 BLOCK: '{' STMT . '}'

    '}'  shift, and go to state 82


state 75

   38 STMT_NO_BLOCK: DECLR ';' .

    $default  reduce using rule 38 (STMT_NO_BLOCK)


state 76

   39 STMT_NO_BLOCK: ASSGN ';' .

    $default  reduce using rule 39 (STMT_NO_BLOCK)


state 77

   32 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' '{' STMT '}' .

    $default  reduce using rule 32 (MAIN)


state 78

   35 STMT: STMT_NO_BLOCK STMT .

    $default  reduce using rule 35 (STMT)


state 79

   36 STMT: BLOCK STMT .

    $default  reduce using rule 36 (STMT)


state 80

   44 WHILE: T_WHILE '(' COND . ')' WHILE_2

    ')'  shift, and go to state 83


state 81

   40 STMT_NO_BLOCK: T_IF COND STMT .
   41              | T_IF COND STMT . T_ELSE STMT

    T_ELSE  shift, and go to state 84

    $default  reduce using rule 40 (STMT_NO_BLOCK)


state 82

   43 BLOCK: '{' STMT '}' .

    $default  reduce using rule 43 (BLOCK)


state 83

   44 WHILE: T_WHILE '(' COND ')' . WHILE_2

    ';'  shift, and go to state 85
    '{'  shift, and go to state 86

    WHILE_2  go to state 87


state 84

   41 STMT_NO_BLOCK: T_IF COND STMT T_ELSE . STMT

    T_INT     shift, and go to state 1
    T_DOUBLE  shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_CHAR    shift, and go to state 4
    T_WHILE   shift, and go to state 59
    T_IF      shift, and go to state 60
    T_ID      shift, and go to state 6
    '{'       shift, and go to state 61

    T_INT     [reduce using rule 37 (STMT)]
    T_DOUBLE  [reduce using rule 37 (STMT)]
    T_FLOAT   [reduce using rule 37 (STMT)]
    T_CHAR    [reduce using rule 37 (STMT)]
    T_WHILE   [reduce using rule 37 (STMT)]
    T_IF      [reduce using rule 37 (STMT)]
    T_ID      [reduce using rule 37 (STMT)]
    '{'       [reduce using rule 37 (STMT)]
    $default  reduce using rule 37 (STMT)

    DECLR          go to state 62
    TYPE           go to state 63
    ASSGN          go to state 64
    STMT           go to state 88
    STMT_NO_BLOCK  go to state 66
    BLOCK          go to state 67
    WHILE          go to state 68


state 85

   48 WHILE_2: ';' .

    $default  reduce using rule 48 (WHILE_2)


state 86

   47 WHILE_2: '{' . STMT '}'

    T_INT     shift, and go to state 1
    T_DOUBLE  shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_CHAR    shift, and go to state 4
    T_WHILE   shift, and go to state 59
    T_IF      shift, and go to state 60
    T_ID      shift, and go to state 6
    '{'       shift, and go to state 61

    $default  reduce using rule 37 (STMT)

    DECLR          go to state 62
    TYPE           go to state 63
    ASSGN          go to state 64
    STMT           go to state 89
    STMT_NO_BLOCK  go to state 66
    BLOCK          go to state 67
    WHILE          go to state 68


state 87

   44 WHILE: T_WHILE '(' COND ')' WHILE_2 .

    $default  reduce using rule 44 (WHILE)


state 88

   41 STMT_NO_BLOCK: T_IF COND STMT T_ELSE STMT .

    $default  reduce using rule 41 (STMT_NO_BLOCK)


state 89

   47 WHILE_2: '{' STMT . '}'

    '}'  shift, and go to state 90


state 90

   47 WHILE_2: '{' STMT '}' .

    $default  reduce using rule 47 (WHILE_2)
